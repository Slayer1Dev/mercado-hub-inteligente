
-- Tabela para armazenar perguntas do Mercado Livre
CREATE TABLE public.mercado_livre_questions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  question_id TEXT NOT NULL UNIQUE,
  item_id TEXT NOT NULL,
  question_text TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'new', -- 'new', 'ia_answered', 'user_approved', 'sent'
  ia_response TEXT,
  final_response TEXT,
  question_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Tabela para logs detalhados
CREATE TABLE public.integration_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  integration_type TEXT NOT NULL, -- 'mercado_livre', 'gemini', 'general'
  action TEXT NOT NULL,
  status TEXT NOT NULL, -- 'success', 'error', 'warning', 'info'
  message TEXT NOT NULL,
  details JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Habilitar RLS nas tabelas
ALTER TABLE public.mercado_livre_questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.integration_logs ENABLE ROW LEVEL SECURITY;

-- Políticas para perguntas do ML
CREATE POLICY "Users can manage their own questions"
  ON public.mercado_livre_questions
  FOR ALL
  USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all questions"
  ON public.mercado_livre_questions
  FOR SELECT
  USING (public.is_admin(auth.uid()));

-- Políticas para logs
CREATE POLICY "Users can view their own logs"
  ON public.integration_logs
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "System can insert logs"
  ON public.integration_logs
  FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Admins can view all logs"
  ON public.integration_logs
  FOR SELECT
  USING (public.is_admin(auth.uid()));
